//Count Inversions

class Main { 
    static long inversionCount(long arr[], int n) {
        return mergeSort(arr, 0, n - 1);
    }

    public static long mergeSort(long arr[], int lo, int hi) {
        if (lo >= hi) {
            return 0L;
        }
        int mid = lo + (hi - lo) / 2;
        long invCount = 0;
        invCount += mergeSort(arr, lo, mid);
        invCount += mergeSort(arr, mid + 1, hi);
        invCount += merge(arr, lo, mid, hi);
        return invCount;
    }

    public static long merge(long[] arr, int lo, int mid, int hi) {
        long[] conquer = new long[hi - lo + 1];
        int idx1 = lo;
        int idx2 = mid + 1;
        int k = 0;
        long invCount = 0;

        while (idx1 <= mid && idx2 <= hi) {
            if (arr[idx1] <= arr[idx2]) {
                conquer[k++] = arr[idx1++];
            } else {
                conquer[k++] = arr[idx2++];
                invCount += (mid + 1 - idx1); // Count inversions
            }
        }

        while (idx1 <= mid) {
            conquer[k++] = arr[idx1++];
        }

        while (idx2 <= hi) {
            conquer[k++] = arr[idx2++];
        }

        for (int i = 0; i < conquer.length; i++) {
            arr[lo + i] = conquer[i];
        }

        return invCount;
    }
}
